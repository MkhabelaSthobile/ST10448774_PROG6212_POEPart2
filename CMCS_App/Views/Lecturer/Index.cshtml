@model IEnumerable<CMCS_App.Models.Claim>
@{
    ViewData["Title"] = "My Claims";
}

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h2>My Claims</h2>
            <p class="lead">Manage and track your monthly claims</p>
            <a href="@Url.Action("Create", "Lecturer")" class="btn btn-primary btn-lg">
                <i class="fas fa-plus-circle"></i> Submit New Claim
            </a>
        </div>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Quick Stats -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-white bg-primary">
                <div class="card-body">
                    <h6 class="card-title">Total Claims</h6>
                    <h3 class="card-text">@Model.Count()</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-success">
                <div class="card-body">
                    <h6 class="card-title">Approved</h6>
                    <h3 class="card-text">@Model.Count(c => c.Status.Contains("Approved"))</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-warning">
                <div class="card-body">
                    <h6 class="card-title">Pending</h6>
                    <h3 class="card-text">@Model.Count(c => c.Status == "Pending" || c.Status == "Submitted")</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-danger">
                <div class="card-body">
                    <h6 class="card-title">Rejected</h6>
                    <h3 class="card-text">@Model.Count(c => c.Status.Contains("Rejected"))</h3>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">
                <i class="fas fa-list me-2"></i>My Claim History
            </h5>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Claim ID</th>
                                <th>Month</th>
                                <th>Hours</th>
                                <th>Rate (R)</th>
                                <th>Total (R)</th>
                                <th>Status</th>
                                <th>Submitted</th>
                                <th>Document</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var claim in Model)
                            {
                                <tr>
                                    <td><strong>#@claim.ClaimID</strong></td>
                                    <td>@claim.Month</td>
                                    <td>@claim.HoursWorked</td>
                                    <td>@claim.HourlyRate.ToString("N2")</td>
                                    <td><strong>@claim.TotalAmount.ToString("N2")</strong></td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(claim.Status)">@claim.Status</span>
                                        @if (!string.IsNullOrEmpty(claim.RejectionReason))
                                        {
                                            <br />
                                            <small class="text-muted" title="@claim.RejectionReason">
                                                <i class="fas fa-info-circle"></i> @TruncateReason(claim.RejectionReason, 30)
                                            </small>
                                        }
                                    </td>
                                    <td>@claim.SubmissionDate.ToString("dd MMM yyyy")</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(claim.SupportingDocument))
                                        {
                                            <a href="@Url.Action("DownloadDocument", "Lecturer", new { id = claim.ClaimID })"
                                               class="btn btn-outline-primary btn-sm" title="Download Document">
                                                <i class="fas fa-download"></i>
                                            </a>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No document</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <a href="@Url.Action("Details", "Lecturer", new { id = claim.ClaimID })"
                                               class="btn btn-info" title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a href="@Url.Action("Track", "Lecturer", new { id = claim.ClaimID })"
                                               class="btn btn-secondary" title="Track Status">
                                                <i class="fas fa-tasks"></i>
                                            </a>
                                            @if (claim.Status == "Pending" || claim.Status == "Submitted")
                                            {
                                                <button class="btn btn-warning" title="Edit Claim" disabled>
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-inbox fa-4x text-muted mb-3"></i>
                    <h4 class="text-muted">No Claims Submitted Yet</h4>
                    <p class="text-muted">You haven't submitted any claims yet. Get started by submitting your first claim.</p>
                    <a href="@Url.Action("Create", "Lecturer")" class="btn btn-primary btn-lg">
                        <i class="fas fa-plus-circle"></i> Submit Your First Claim
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Auto-dismiss alerts after 5 seconds
        setTimeout(function() {
            $('.alert').alert('close');
        }, 5000);
    </script>
}

@functions {
    public string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            var s when s.Contains("approved by manager") => "bg-success",
            var s when s.Contains("approved by coordinator") => "bg-info",
            var s when s.Contains("rejected") => "bg-danger",
            var s when s.Contains("submitted") => "bg-primary",
            _ => "bg-warning"
        };
    }

    public string TruncateReason(string reason, int maxLength)
    {
        if (string.IsNullOrEmpty(reason)) return "";
        return reason.Length <= maxLength ? reason : reason.Substring(0, maxLength) + "...";
    }
}