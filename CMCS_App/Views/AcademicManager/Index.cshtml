@model IEnumerable<CMCS_App.Models.Claim>
@{
    ViewData["Title"] = "Claims Overview";
}

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h2>Claims Overview</h2>
            <p class="lead">Manage and monitor all claims in the system</p>
            <a href="@Url.Action("Reports", "AcademicManager")" class="btn btn-info">
                <i class="fas fa-chart-bar me-1"></i>View Reports
            </a>
        </div>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Summary Statistics -->
    <div class="row mb-4">
        <div class="col-md-2">
            <div class="card text-white bg-primary">
                <div class="card-body text-center p-3">
                    <h6 class="card-title">Total Claims</h6>
                    <h4 class="card-text">@Model.Count()</h4>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-white bg-success">
                <div class="card-body text-center p-3">
                    <h6 class="card-title">Approved</h6>
                    <h4 class="card-text">@Model.Count(c => c.Status.Contains("Approved"))</h4>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-white bg-warning">
                <div class="card-body text-center p-3">
                    <h6 class="card-title">Pending</h6>
                    <h4 class="card-text">@Model.Count(c => c.Status == "Pending" || c.Status == "Submitted")</h4>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-white bg-info">
                <div class="card-body text-center p-3">
                    <h6 class="card-title">Coordinator Approved</h6>
                    <h4 class="card-text">@Model.Count(c => c.Status == "Approved by Coordinator")</h4>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-white bg-danger">
                <div class="card-body text-center p-3">
                    <h6 class="card-title">Rejected</h6>
                    <h4 class="card-text">@Model.Count(c => c.Status.Contains("Rejected"))</h4>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-white bg-secondary">
                <div class="card-body text-center p-3">
                    <h6 class="card-title">Total Amount</h6>
                    <h6 class="card-text">R @Model.Where(c => c.Status.Contains("Approved")).Sum(c => c.TotalAmount).ToString("N0")</h6>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3 align-items-center">
                <div class="col-md-3">
                    <label for="statusFilter" class="form-label">Filter by Status:</label>
                    <select class="form-select" id="statusFilter" onchange="filterClaims()">
                        <option value="all">All Statuses</option>
                        <option value="pending">Pending/Submitted</option>
                        <option value="coordinator">Coordinator Approved</option>
                        <option value="manager">Manager Approved</option>
                        <option value="rejected">Rejected</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="lecturerFilter" class="form-label">Filter by Lecturer:</label>
                    <select class="form-select" id="lecturerFilter" onchange="filterClaims()">
                        <option value="all">All Lecturers</option>
                        @foreach (var lecturer in Model.Select(c => c.Lecturer).Distinct().Where(l => l != null))
                        {
                            <option value="@lecturer.LecturerID">@lecturer.FullName</option>
                        }
                    </select>
                </div>
                <div class="col-md-6">
                    <label for="searchBox" class="form-label">Search:</label>
                    <input type="text" class="form-control" id="searchBox" placeholder="Search by month, lecturer, or status..." onkeyup="filterClaims()">
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">
                <i class="fas fa-tasks me-2"></i>All Claims
            </h5>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="claimsTable">
                        <thead class="table-dark">
                            <tr>
                                <th>Claim ID</th>
                                <th>Lecturer</th>
                                <th>Module</th>
                                <th>Month</th>
                                <th>Hours</th>
                                <th>Amount (R)</th>
                                <th>Status</th>
                                <th>Submitted</th>
                                <th>Document</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var claim in Model.OrderByDescending(c => c.SubmissionDate))
                            {
                                <tr class="claim-row"
                                    data-status="@claim.Status.ToLower()"
                                    data-lecturer="@claim.LecturerID"
                                    data-search="@($"{claim.Month} {claim.Lecturer?.FullName} {claim.Status} {claim.Lecturer?.ModuleName}")">
                                    <td><strong>#@claim.ClaimID</strong></td>
                                    <td>
                                        <div class="fw-bold">@claim.Lecturer?.FullName</div>
                                        <small class="text-muted">@claim.Lecturer?.Email</small>
                                    </td>
                                    <td>@claim.Lecturer?.ModuleName</td>
                                    <td>@claim.Month</td>
                                    <td>@claim.HoursWorked</td>
                                    <td><strong>@claim.TotalAmount.ToString("N2")</strong></td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(claim.Status)">@claim.Status</span>
                                        @if (!string.IsNullOrEmpty(claim.RejectionReason))
                                        {
                                            <br />
                                            <small class="text-muted" title="@claim.RejectionReason">
                                                <i class="fas fa-info-circle"></i> @TruncateReason(claim.RejectionReason, 25)
                                            </small>
                                        }
                                    </td>
                                    <td>@claim.SubmissionDate.ToString("dd MMM yyyy")</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(claim.SupportingDocument))
                                        {
                                            <a href="@Url.Action("DownloadDocument", "AcademicManager", new { id = claim.ClaimID })"
                                               class="btn btn-outline-primary btn-sm" title="Download Document">
                                                <i class="fas fa-download"></i>
                                            </a>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <a href="@Url.Action("Details", "AcademicManager", new { id = claim.ClaimID })"
                                               class="btn btn-info" title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </a>

                                            @if (claim.Status == "Approved by Coordinator")
                                            {
                                                <form method="post" action="@Url.Action("Approve", "AcademicManager", new { id = claim.ClaimID })" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-success" title="Approve Claim">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                </form>

                                                <button type="button" class="btn btn-danger"
                                                        data-bs-toggle="modal" data-bs-target="#rejectModal@claim.ClaimID" title="Reject Claim">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            }
                                        </div>

                                        <!-- Reject Modal for Manager -->
                                        @if (claim.Status == "Approved by Coordinator")
                                        {
                                            <div class="modal fade" id="rejectModal@claim.ClaimID" tabindex="-1">
                                                <div class="modal-dialog">
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <h5 class="modal-title">Reject Claim #@claim.ClaimID</h5>
                                                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                                        </div>
                                                        <form method="post" action="@Url.Action("Reject", "AcademicManager", new { id = claim.ClaimID })">
                                                            @Html.AntiForgeryToken()
                                                            <div class="modal-body">
                                                                <p>You are about to reject the claim from <strong>@claim.Lecturer?.FullName</strong> for <strong>@claim.Month</strong>.</p>
                                                                <p>This claim was already approved by the coordinator.</p>
                                                                <div class="mb-3">
                                                                    <label for="reason@claim.ClaimID" class="form-label">Reason for Rejection:</label>
                                                                    <textarea name="reason" class="form-control" id="reason@claim.ClaimID"
                                                                  rows="3" placeholder="Please provide a reason for rejection..." required></textarea>
                                                                </div>
                                                            </div>
                                                            <div class="modal-footer">
                                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                                <button type="submit" class="btn btn-danger">Reject Claim</button>
                                                            </div>
                                                        </form>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-database fa-4x text-muted mb-3"></i>
                    <h4 class="text-muted">No Claims Found</h4>
                    <p class="text-muted">There are no claims in the system yet.</p>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function filterClaims() {
            const statusFilter = document.getElementById('statusFilter').value;
            const lecturerFilter = document.getElementById('lecturerFilter').value;
            const searchText = document.getElementById('searchBox').value.toLowerCase();

            const rows = document.querySelectorAll('#claimsTable .claim-row');

            rows.forEach(row => {
                const status = row.getAttribute('data-status');
                const lecturer = row.getAttribute('data-lecturer');
                const searchData = row.getAttribute('data-search').toLowerCase();

                let statusMatch = true;
                let lecturerMatch = true;
                let searchMatch = true;

                // Status filter
                if (statusFilter !== 'all') {
                    if (statusFilter === 'pending') {
                        statusMatch = status.includes('pending') || status.includes('submitted');
                    } else if (statusFilter === 'coordinator') {
                        statusMatch = status.includes('coordinator') && !status.includes('manager');
                    } else if (statusFilter === 'manager') {
                        statusMatch = status.includes('manager');
                    } else if (statusFilter === 'rejected') {
                        statusMatch = status.includes('rejected');
                    }
                }

                // Lecturer filter
                if (lecturerFilter !== 'all') {
                    lecturerMatch = lecturer === lecturerFilter;
                }

                // Search filter
                if (searchText) {
                    searchMatch = searchData.includes(searchText);
                }

                // Show/hide row based on filters
                if (statusMatch && lecturerMatch && searchMatch) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // Auto-dismiss alerts after 5 seconds
        setTimeout(function() {
            $('.alert').alert('close');
        }, 5000);
    </script>
}

@functions {
    public string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            var s when s.Contains("approved by manager") => "bg-success",
            var s when s.Contains("approved by coordinator") => "bg-info",
            var s when s.Contains("rejected by coordinator") => "bg-danger",
            var s when s.Contains("rejected by manager") => "bg-dark",
            var s when s.Contains("submitted") => "bg-primary",
            _ => "bg-warning"
        };
    }

    public string TruncateReason(string reason, int maxLength)
    {
        if (string.IsNullOrEmpty(reason)) return "";
        return reason.Length <= maxLength ? reason : reason.Substring(0, maxLength) + "...";
    }
}